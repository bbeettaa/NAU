<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>AltCover.Toolkit</name></assembly>
<members>
<member name="T:AltCover.BranchOrdinal">
 <summary>
 <para type="description">Attribute used to associate branches with sequence points for branch visit computation.</para>
 </summary>
</member>
<member name="T:AltCover.XmlUtilities">
 <summary>
 <para type="description">Methods for working on XML types</para>
 </summary>
</member>
<member name="M:AltCover.XmlTypes.ToXDocument(System.Xml.XmlDocument)">
 <summary>
 <para type="description">Takes an `XmlDocument` in and returns an equivalent `XDocument`.</para>
 </summary>
 <param name="xmlDocument">The input document</param>
 <returns>The equivalent `XDocument`</returns>
</member>
<member name="M:AltCover.XmlTypes.ToXmlDocument(System.Xml.Linq.XDocument)">
 <summary>
 <para type="description">Takes an `XDocument` in and returns an equivalent `XmlDocument`.</para>
 </summary>
 <param name="document">The input document</param>
 <returns>The equivalent `XmlDocument`</returns>
</member>
<member name="T:AltCover.XmlTypes">
 <summary>
 <para type="description">Methods for inter-converting XML types</para>
 </summary>
</member>
<member name="M:AltCover.Xhtml.ConvertToBarChart(System.Xml.Linq.XDocument)">
 <summary>
 <para type="synopsis">Generates a simple HTML report from coverage data.</para>
 <para type="description">The report produced is based on the old NCover 1.5.8 XSLT, for both NCover and OpenCover coverage format data.  The input is as a file name or an `XDocument` from the pipeline, the output is to the pipeline as an `XDocument`, and, optionally, to a file. </para>
 </summary>
 <param name="document">The input report</param>
 <returns>The HTML summary</returns>
</member>
<member name="T:AltCover.Xhtml">
 <summary>
 <para>Functions for building HTML-based reports</para>
 </summary>
</member>
<member name="M:AltCover.OpenCover.JsonToXml(System.String)">
 <summary>
 <para type="synopsis">Takes JSON output from coverlet of AltCover's own native JSON format and converts it to a minimal OpenCover style XML document.</para>
 </summary>
 <param name="document">The input JSON report as text</param>
 <returns>The equivalent OpenCover style XML for line and branch coverage</returns>
</member>
<member name="M:AltCover.OpenCover.Merge(System.Collections.Generic.IEnumerable{System.Xml.Linq.XDocument})">
 <summary>
 <para type="synopsis">Merges OpenCover reports.</para>
 <para type="synopsis">Merges OpenCover reports.</para>
 <para type="description">Takes a set of OpenCover reports and crates a composite.  It handles
 both strict (`OpenCover`, `AltCover --reportFormat=OpenCover`) and more relaxed (`coverlet`,
 `ConvertFrom-CoverageJson`, `Write-OpenCoverDerivedState -Coverlet`) interpretations of the
 format, which may lead to a not-quite strict result.  Note -- Module records are merged only
 if their hash values match, so output from different builds and possibly different source will
 be kept distinct.</para>
 <param name="documents">The input reports</param>
 </summary>
</member>
<member name="M:AltCover.OpenCover.CompressBranching(System.Xml.Linq.XDocument,System.Boolean,System.Boolean)">
 <summary>
 <para type="synopsis">Removes compiler-generated hidden branches from OpenCover.</para>
 <para type="description">Takes output from the OpenCover program, and adjust from OpenCover's liberal idea of significant branches towards AltCover's more restricted approach -- chose either or both of `sameSpan` to unify branches that go from the same start, and take the same trajectory to the same end (OpenCover issue #786 being one instance of this) and `withinSequencePoint` to remove branches interior to a statement (compiler generated things like stashing of lambdas, the hidden conditional `Dispose()` after a `using`, or inside F# inlines -- OpenCover issues #657, #807 being instances of this).</para>
 <para type="description">Either takes an `XDocument` from the pipeline or from a file; emits the result as an `XDocument` to the pipeline and optionally to a file.</para>
 </summary>
 <param name="document">The input report</param>
 <param name="withinSequencePoint">Whether to hide branches that terminate inside the same sequence point as they begin</param>
 <param name="sameSpan">Whether to treat branches between the same points as being the same branch</param>
 <returns>The filled-in report</returns>
</member>
<member name="M:AltCover.OpenCover.FormatFromCoverlet(System.Xml.Linq.XDocument,System.String[])">
 <summary>
 <para type="synopsis">Fills in gaps in `coverlet`'s OpenCover dialect.</para>
 <para type="description">Adds summary data and other items to report in `coverlet`'s OpenCover dialect, particularly giving somewhat meaningful start and end column values for its line-based paradigm, as well as npath coverage and branch exits.</para>
 </summary>
 <param name="report">The input report</param>
 <param name="files">The associated assembly paths</param>
 <returns>The filled-in report</returns>
</member>
<member name="M:AltCover.OpenCover.PostProcess(System.Xml.Linq.XDocument,AltCover.BranchOrdinal)">
 <summary>
 <para type="synopsis">Updates summary and related coverage-derived data based on visit counts.</para>
 </summary>
 <param name="document">The input report</param>
 <param name="ordinal">How branches are indexed.  If offset values are available, those are preferred.</param>
</member>
<member name="T:AltCover.OpenCover">
 <summary>
 <para>Functions manipulating OpenCover format reports from various generators</para>
 </summary>
</member>
<member name="M:AltCover.CoverageFormats.ConvertToNCover(System.Xml.Linq.XDocument)">
 <summary>
 <para type="synopsis">Converts OpenCover format to NCover format.</para>
 <para type="description">Takes the OpenCover input either as an ``XDocument`` from the object pipeline or from a file.</para>
 <para type="description">Writes the classic NCover report to the pipeline as an ``XDocument``, and, optionally, to a file.</para>
 </summary>
 <param name="document">The report to convert.</param>
 <returns>The converted document</returns>
</member>
<member name="M:AltCover.CoverageFormats.ConvertFromNCover(System.Xml.Linq.XDocument,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 <para type="synopsis">Converts classic NCover format and returns OpenCover format.</para>
 <para type="description">The classic NCover format input either may be as an `XDocument` from the object pipeline or from a file.</para>
 <para type="description">Writes the OpenCover format report to the pipeline as an `XDocument`, and, optionally, to a file.  The report will contain data for the assemblies listed as the `-Assembly` argument and that are in the NCover input.</para>
 </summary>
 <param name="document">The report to convert.</param>
 <param name="assemblies">The assemblies contributing to the report.</param>
 <returns>The converted document</returns>
</member>
<member name="M:AltCover.CoverageFormats.ConvertToJson(System.Xml.Linq.XDocument)">
 <summary>
 <para type="description">Takes either OpenCover or classic NCover format input as an `XDocument`, as an argument or from the object pipeline. Writes the JSON report to a atring.</para>
 </summary>
 <param name="document">The report to convert.</param>
</member>
<member name="M:AltCover.CoverageFormats.ConvertToCobertura(System.Xml.Linq.XDocument)">
 <summary>
 <para type="synopsis">Creates a Cobertura format report from other report formats.</para>
 <para type="description">Takes either OpenCover or classic NCover format input as an `XDocument`, as an argument or from the object pipeline.</para>
 <para type="description">Writes the Cobertura report to the object pipeline as an `XDocument`, and optionally to a file.</para>
 </summary>
 <param name="document">The report to convert.</param>
 <returns>The converted document</returns>
</member>
<member name="M:AltCover.CoverageFormats.ConvertToLcov(System.Xml.Linq.XDocument,System.IO.Stream)">
 <summary>
 <para type="description">Takes either OpenCover or classic NCover format input as an `XDocument`, as an argument or from the object pipeline. Writes the Lcov report to a file.</para>
 </summary>
 <param name="document">The report to convert.</param>
 <param name="stream">The output is written here.</param>
</member>
<member name="T:AltCover.CoverageFormats">
 <summary>
 <para type="description">Conversions of NCover and OpenCover format data to other report formats.</para>
 </summary>
</member>
</members>
</doc>
