<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml" xmlns="http://msh">
  <!-- Cmdlet: Add-Accelerator -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Add-Accelerator</command:name>
      <command:verb>Add</command:verb>
      <command:noun>Accelerator</command:noun>
      <maml:description>
        <maml:para>Add one or more type abbreviations, like the built-in `[xml]` for `System.Xml.XmlDocument`.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Extends the built-in set of type abbreviations with user declared ones. Two common abbreviations are supplied as switch parameters, and then others can be added free-form.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Add-Accelerator</maml:name>
        <!-- Parameter: Accelerator -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Accelerator</maml:name>
          <maml:description>
            <maml:para>Add [accelerators] for the accelerator type</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Mapping -->
        <command:parameter required="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
          <maml:name>Mapping</maml:name>
          <maml:description>
            <maml:para>Mapping of name to type</maml:para>
            <maml:para>`[Key.ToString()]` is the accelerator for `Value.GetType()` (or just `Value` if that is a `System.Type` already.</maml:para>
          </maml:description>
          <command:parameterValue required="true">Hashtable</command:parameterValue>
          <dev:type>
            <maml:name>System.Collections.Hashtable</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: XDocument -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Add [xdoc] for the `System.Xml.Linq.XDocument` type</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Mapping -->
      <command:parameter required="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
        <maml:name>Mapping</maml:name>
        <maml:description>
          <maml:para>Mapping of name to type</maml:para>
          <maml:para>`[Key.ToString()]` is the accelerator for `Value.GetType()` (or just `Value` if that is a `System.Type` already.</maml:para>
        </maml:description>
        <command:parameterValue required="true">Hashtable</command:parameterValue>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Accelerator -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Accelerator</maml:name>
        <maml:description>
          <maml:para>Add [accelerators] for the accelerator type</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: XDocument -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Add [xdoc] for the `System.Xml.Linq.XDocument` type</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Mapping of name to type</maml:para>
          <maml:para>`[Key.ToString()]` is the accelerator for `Value.GetType()` (or just `Value` if that is a `System.Type` already.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: None -->
      <command:returnValue>
        <dev:type>
          <maml:name>None</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Add-Accelerator -XDocument</dev:code>
        <dev:remarks>
          <maml:para>Add `[xdoc]` the easy way</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 2  ----------</maml:title>
        <dev:code>Add-Accelerator -Mapping @{ "xdoc" = [type]::gettype("System.Xml.Linq.XDocument")</dev:code>
        <dev:remarks>
          <maml:para>Add `[xdoc]` by the long way round</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: Get-Accelerator -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Get-Accelerator</command:name>
      <command:verb>Get</command:verb>
      <command:noun>Accelerator</command:noun>
      <maml:description>
        <maml:para>List all type abbreviations, like the built-in `[xml]` for `System.Xml.XmlDocument`.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Reports all currently available type abbreviations, both system- and user- defined.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: __AllParameterSets -->
      <command:syntaxItem>
        <maml:name>Get-Accelerator</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes />
    <command:returnValues>
      <!-- OutputType: Hashtable -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>$a = Get-Accelerator</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: Invoke-AltCover -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Invoke-AltCover</command:name>
      <command:verb>Invoke</command:verb>
      <command:noun>AltCover</command:noun>
      <maml:description>
        <maml:para>The equivalent of the `AltCover` command or `altcover` global tool.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>The arguments parallel the command-line executable; the main difference is that `-Runner` is a switch parameter that selects the runner-mode parameter set if present.</maml:para>
      <maml:para>The "working directory" used where mentioned in the parameter descriptions is the current set location in PowerShell, **_not_** the underlying current directory.</maml:para>
      <maml:para>**Note**: As Powershell informational output is suppressed by default in PowerShell 5+, the `-InformationAction Continue` option is needed to show the progress and summary information for the process if this is desired.</maml:para>
      <maml:para>Summary information is also written to the object pipeline.</maml:para>
      <maml:para>**Note**: `-WhatIf` includes validation for the command line arguments. It is ignored for the purely read-only `-Version` option</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: Runner -->
      <command:syntaxItem>
        <maml:name>Invoke-AltCover</maml:name>
        <!-- Parameter: Runner -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="1">
          <maml:name>Runner</maml:name>
          <maml:description>
            <maml:para>Selects `Runner` mode</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: RecorderDirectory -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="named">
          <maml:name>RecorderDirectory</maml:name>
          <maml:description>
            <maml:para>The folder containing the instrumented code to monitor (including the `AltCover.Recorder.g.dll` generated by previous a use of the .net core `AltCover`).</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Cobertura -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Cobertura</maml:name>
          <maml:description>
            <maml:para>File path for Cobertura format version of the collected data</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: CommandLine -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>CommandLine</maml:name>
          <maml:description>
            <maml:para>Arguments for a launched process</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: DropReturnCode -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DropReturnCode</maml:name>
          <maml:description>
            <maml:para>Do not report any non-zero return code from a launched process.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Executable -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Executable</maml:name>
          <maml:description>
            <maml:para>The executable to run e.g. `dotnet`</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: LcovReport -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>LcovReport</maml:name>
          <maml:description>
            <maml:para>File path for lcov format version of the collected data</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Write the recorded coverage to this file rather than overwriting the original report file.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: SummaryFormat -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>SummaryFormat</maml:name>
          <maml:description>
            <maml:para>Selects summary format</maml:para>
            <maml:para>Possible values: Default, N, O, C, R, B, RPlus, BPlus</maml:para>
          </maml:description>
          <command:parameterValue required="true">Summary[]</command:parameterValue>
          <dev:type>
            <maml:name>AltCover.Commands.Summary[]</maml:name>
            <maml:uri />
            <maml:description>
              <maml:para>Values for the Invoke-AltCover -Summary option</maml:para>
            </maml:description>
          </dev:type>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">N</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">O</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">C</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">R</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">B</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">RPlus</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">BPlus</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: Threshold -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Threshold</maml:name>
          <maml:description>
            <maml:para>One or more of minimum acceptable statement (S), branch (B) or method (M)/alternative method (AM) coverage percentage (integer, 1 to 100) or maximum acceptable CRAP/alternative CRAP score (C/AC followed by integer, 1 to 255) e.g. M80AM70C40AC100B50. If the value starts with a number, a leading S is assumed. If any threshold is specified more than once, the last instance is assumed -- so 25S50 counts as S50. Zero/absent values are ignored. If a coverage result is below threshold, or the CRAP score is above threshold, the return code of the process is the largest abs(threshold - actual) rounded up to the nearest integer.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Verbosity -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Verbosity</maml:name>
          <maml:description>
            <maml:para>Selects output level of the command</maml:para>
            <maml:para>Possible values: Off, Error, Warning, Info, Verbose</maml:para>
          </maml:description>
          <command:parameterValue required="true">TraceLevel</command:parameterValue>
          <dev:type>
            <maml:name>System.Diagnostics.TraceLevel</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Info</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Off</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Error</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warning</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Info</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Verbose</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: WorkingDirectory -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>WorkingDirectory</maml:name>
          <maml:description>
            <maml:para>The working directory for the application launch</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: Instrument -->
      <command:syntaxItem>
        <maml:name>Invoke-AltCover</maml:name>
        <!-- Parameter: AssemblyExcludeFilter -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>AssemblyExcludeFilter</maml:name>
          <maml:description>
            <maml:para>Assembly names to exclude from instrumentation (linked to instrumented assemblies)</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: AssemblyFilter -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>AssemblyFilter</maml:name>
          <maml:description>
            <maml:para>Assembly names to exclude from instrumentation (linked by instrumented assemblies)</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: AttributeFilter -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>AttributeFilter</maml:name>
          <maml:description>
            <maml:para>Attribute names to exclude from instrumentation</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: AttributeTopLevel -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>AttributeTopLevel</maml:name>
          <maml:description>
            <maml:para>Attributes to mark a type as "top level"</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: BranchCover -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>BranchCover</maml:name>
          <maml:description>
            <maml:para>Do not record line coverage. Implies, and is compatible with, the -ReportFormat "opencover" option. Incompatible with `-LineCover`.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: CallContext -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>CallContext</maml:name>
          <maml:description>
            <maml:para>Tracking either times of visits in ticks or designated method calls leading to the visits.</maml:para>
            <maml:para>A single digit 0-7 gives the number of decimal places of seconds to report; everything else is at the mercy of the system clock information available through DateTime.UtcNow</maml:para>
            <maml:para>A string in brackets "[]" is interpreted as an attribute type name (the trailing "Attribute" is optional), so [Test] or [TestAttribute] will match; if the name contains one or more ".", then it will be matched against the full name of the attribute type.</maml:para>
            <maml:para>Other strings are interpreted as method names (fully qualified if the string contains any "." characters).</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: CommandLine -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>CommandLine</maml:name>
          <maml:description>
            <maml:para>Arguments for a launched process</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Defer -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Defer</maml:name>
          <maml:description>
            <maml:para>Defers writing runner-mode coverage data until process exit.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Dependency -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Dependency</maml:name>
          <maml:description>
            <maml:para>Assembly paths to resolve missing references.</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: DropReturnCode -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>DropReturnCode</maml:name>
          <maml:description>
            <maml:para>Do not report any non-zero return code from a launched process.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: FileFilter -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>FileFilter</maml:name>
          <maml:description>
            <maml:para>Source file names to exclude from instrumentation</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: InPlace -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>InPlace</maml:name>
          <maml:description>
            <maml:para>Instrument the inputDirectory, rather than the outputDirectory (e.g. for `dotnet test`)</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: InputDirectory -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>InputDirectory</maml:name>
          <maml:description>
            <maml:para>Folder or folders containing assemblies to instrument (default: current directory)</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Key -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Key</maml:name>
          <maml:description>
            <maml:para>Strong name key or keys that were used to sign the inputs</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: LineCover -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>LineCover</maml:name>
          <maml:description>
            <maml:para>Do not record branch coverage. Implies, and is compatible with, the -ReportFormat "opencover" option. Incompatible with `-BranchCover`.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: LocalSource -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>LocalSource</maml:name>
          <maml:description>
            <maml:para>Don't instrument code for which the source file is not present.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: MethodFilter -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>MethodFilter</maml:name>
          <maml:description>
            <maml:para>Method names to exclude from instrumentation</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: MethodPoint -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>MethodPoint</maml:name>
          <maml:description>
            <maml:para>Record only whether a method has been visited or not. Overrides the `-LineCover` and `-BranchCover` options.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: MethodTopLevel -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>MethodTopLevel</maml:name>
          <maml:description>
            <maml:para>Names to mark a function as "top level"</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputDirectory -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>OutputDirectory</maml:name>
          <maml:description>
            <maml:para>Folder or folders to receive the instrumented assemblies and their companions (default: sub-folder `__Instrumented` of the current directory; or `__Saved` if `-Inplace` is set).</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: PathFilter -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>PathFilter</maml:name>
          <maml:description>
            <maml:para>Source file paths to exclude from instrumentation</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Report -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Report</maml:name>
          <maml:description>
            <maml:para>The output report template file (default: 'coverage.xml' or 'coverage.json' in the current directory)</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: ReportFormat -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>ReportFormat</maml:name>
          <maml:description>
            <maml:para>Generate the report in the specified format (NCover or the default OpenCover)</maml:para>
            <maml:para>Possible values: NCover, OpenCover</maml:para>
          </maml:description>
          <command:parameterValue required="true">ReportFormat</command:parameterValue>
          <dev:type>
            <maml:name>AltCover.Commands.ReportFormat</maml:name>
            <maml:uri />
            <maml:description>
              <maml:para>Values for the Invoke-AltCover -ReportFormat option</maml:para>
            </maml:description>
          </dev:type>
          <dev:defaultValue>OpenCover</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">NCover</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">OpenCover</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: Save -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Save</maml:name>
          <maml:description>
            <maml:para>Write raw coverage data to file for later processing</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: ShowGenerated -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>ShowGenerated</maml:name>
          <maml:description>
            <maml:para>Mark generated code with a visit count of -2 (Automatic) for the Visualizer if unvisited</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: ShowStatic -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>ShowStatic</maml:name>
          <maml:description>
            <maml:para>Instrument and show code that is by default skipped as trivial.</maml:para>
            <maml:para>Possible values: KeepHidden, Mark, Reveal</maml:para>
          </maml:description>
          <command:parameterValue required="true">ShowHidden</command:parameterValue>
          <dev:type>
            <maml:name>AltCover.Commands.ShowHidden</maml:name>
            <maml:uri />
            <maml:description>
              <maml:para>Values for the Invoke-AltCover -ShowStatic option</maml:para>
            </maml:description>
          </dev:type>
          <dev:defaultValue>KeepHidden</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">KeepHidden</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Mark</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Reveal</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: Single -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Single</maml:name>
          <maml:description>
            <maml:para>only record the first hit at any location (or first for that context if `-CallContext` is operating).</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: SourceLink -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>SourceLink</maml:name>
          <maml:description>
            <maml:para>Display sourcelink URLs rather than file paths if present.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: StrongNameKey -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>StrongNameKey</maml:name>
          <maml:description>
            <maml:para>The default strong naming key to apply to instrumented assemblies</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: SymbolDirectory -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>SymbolDirectory</maml:name>
          <maml:description>
            <maml:para>Additional folder or folders to search for matching symbols for the assemblies in the input directory</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: TypeFilter -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>TypeFilter</maml:name>
          <maml:description>
            <maml:para>Type names to exclude from instrumentation</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: TypeTopLevel -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>TypeTopLevel</maml:name>
          <maml:description>
            <maml:para>Names to mark a type as "top level"</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Verbosity -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>Verbosity</maml:name>
          <maml:description>
            <maml:para>Selects output level of the command</maml:para>
            <maml:para>Possible values: Off, Error, Warning, Info, Verbose</maml:para>
          </maml:description>
          <command:parameterValue required="true">TraceLevel</command:parameterValue>
          <dev:type>
            <maml:name>System.Diagnostics.TraceLevel</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Info</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Off</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Error</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warning</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Info</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Verbose</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: VisibleBranches -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>VisibleBranches</maml:name>
          <maml:description>
            <maml:para>Hide complex internal IL branching implementation details in switch/match constructs, and just show what the source level logic implies.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: ZipFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>ZipFile</maml:name>
          <maml:description>
            <maml:para>Emit the XML report inside a zip archive.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: Version -->
      <command:syntaxItem>
        <maml:name>Invoke-AltCover</maml:name>
        <!-- Parameter: Version -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="1">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Selects `Version` mode</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Runner -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1">
        <maml:name>Runner</maml:name>
        <maml:description>
          <maml:para>Selects `Runner` mode</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: RecorderDirectory -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="named">
        <maml:name>RecorderDirectory</maml:name>
        <maml:description>
          <maml:para>The folder containing the instrumented code to monitor (including the `AltCover.Recorder.g.dll` generated by previous a use of the .net core `AltCover`).</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: WorkingDirectory -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>WorkingDirectory</maml:name>
        <maml:description>
          <maml:para>The working directory for the application launch</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Executable -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Executable</maml:name>
        <maml:description>
          <maml:para>The executable to run e.g. `dotnet`</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: LcovReport -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>LcovReport</maml:name>
        <maml:description>
          <maml:para>File path for lcov format version of the collected data</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Threshold -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Threshold</maml:name>
        <maml:description>
          <maml:para>One or more of minimum acceptable statement (S), branch (B) or method (M)/alternative method (AM) coverage percentage (integer, 1 to 100) or maximum acceptable CRAP/alternative CRAP score (C/AC followed by integer, 1 to 255) e.g. M80AM70C40AC100B50. If the value starts with a number, a leading S is assumed. If any threshold is specified more than once, the last instance is assumed -- so 25S50 counts as S50. Zero/absent values are ignored. If a coverage result is below threshold, or the CRAP score is above threshold, the return code of the process is the largest abs(threshold - actual) rounded up to the nearest integer.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Cobertura -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Cobertura</maml:name>
        <maml:description>
          <maml:para>File path for Cobertura format version of the collected data</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Write the recorded coverage to this file rather than overwriting the original report file.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: CommandLine -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>CommandLine</maml:name>
        <maml:description>
          <maml:para>Arguments for a launched process</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputDirectory -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>InputDirectory</maml:name>
        <maml:description>
          <maml:para>Folder or folders containing assemblies to instrument (default: current directory)</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputDirectory -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>OutputDirectory</maml:name>
        <maml:description>
          <maml:para>Folder or folders to receive the instrumented assemblies and their companions (default: sub-folder `__Instrumented` of the current directory; or `__Saved` if `-Inplace` is set).</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: SymbolDirectory -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>SymbolDirectory</maml:name>
        <maml:description>
          <maml:para>Additional folder or folders to search for matching symbols for the assemblies in the input directory</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Dependency -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Dependency</maml:name>
        <maml:description>
          <maml:para>Assembly paths to resolve missing references.</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Key -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Key</maml:name>
        <maml:description>
          <maml:para>Strong name key or keys that were used to sign the inputs</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: StrongNameKey -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>StrongNameKey</maml:name>
        <maml:description>
          <maml:para>The default strong naming key to apply to instrumented assemblies</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Report -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Report</maml:name>
        <maml:description>
          <maml:para>The output report template file (default: 'coverage.xml' or 'coverage.json' in the current directory)</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: FileFilter -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>FileFilter</maml:name>
        <maml:description>
          <maml:para>Source file names to exclude from instrumentation</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: PathFilter -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>PathFilter</maml:name>
        <maml:description>
          <maml:para>Source file paths to exclude from instrumentation</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: AssemblyFilter -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>AssemblyFilter</maml:name>
        <maml:description>
          <maml:para>Assembly names to exclude from instrumentation (linked by instrumented assemblies)</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: AssemblyExcludeFilter -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>AssemblyExcludeFilter</maml:name>
        <maml:description>
          <maml:para>Assembly names to exclude from instrumentation (linked to instrumented assemblies)</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: TypeFilter -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>TypeFilter</maml:name>
        <maml:description>
          <maml:para>Type names to exclude from instrumentation</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: MethodFilter -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>MethodFilter</maml:name>
        <maml:description>
          <maml:para>Method names to exclude from instrumentation</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: AttributeFilter -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>AttributeFilter</maml:name>
        <maml:description>
          <maml:para>Attribute names to exclude from instrumentation</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: AttributeTopLevel -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>AttributeTopLevel</maml:name>
        <maml:description>
          <maml:para>Attributes to mark a type as "top level"</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: TypeTopLevel -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>TypeTopLevel</maml:name>
        <maml:description>
          <maml:para>Names to mark a type as "top level"</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: MethodTopLevel -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>MethodTopLevel</maml:name>
        <maml:description>
          <maml:para>Names to mark a function as "top level"</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: CallContext -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>CallContext</maml:name>
        <maml:description>
          <maml:para>Tracking either times of visits in ticks or designated method calls leading to the visits.</maml:para>
          <maml:para>A single digit 0-7 gives the number of decimal places of seconds to report; everything else is at the mercy of the system clock information available through DateTime.UtcNow</maml:para>
          <maml:para>A string in brackets "[]" is interpreted as an attribute type name (the trailing "Attribute" is optional), so [Test] or [TestAttribute] will match; if the name contains one or more ".", then it will be matched against the full name of the attribute type.</maml:para>
          <maml:para>Other strings are interpreted as method names (fully qualified if the string contains any "." characters).</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: ReportFormat -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>ReportFormat</maml:name>
        <maml:description>
          <maml:para>Generate the report in the specified format (NCover or the default OpenCover)</maml:para>
          <maml:para>Possible values: NCover, OpenCover</maml:para>
        </maml:description>
        <command:parameterValue required="true">ReportFormat</command:parameterValue>
        <dev:type>
          <maml:name>AltCover.Commands.ReportFormat</maml:name>
          <maml:uri />
          <maml:description>
            <maml:para>Values for the Invoke-AltCover -ReportFormat option</maml:para>
          </maml:description>
        </dev:type>
        <dev:defaultValue>OpenCover</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">NCover</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">OpenCover</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: InPlace -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>InPlace</maml:name>
        <maml:description>
          <maml:para>Instrument the inputDirectory, rather than the outputDirectory (e.g. for `dotnet test`)</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Save -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Save</maml:name>
        <maml:description>
          <maml:para>Write raw coverage data to file for later processing</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: ZipFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>ZipFile</maml:name>
        <maml:description>
          <maml:para>Emit the XML report inside a zip archive.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: MethodPoint -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>MethodPoint</maml:name>
        <maml:description>
          <maml:para>Record only whether a method has been visited or not. Overrides the `-LineCover` and `-BranchCover` options.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Single -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Single</maml:name>
        <maml:description>
          <maml:para>only record the first hit at any location (or first for that context if `-CallContext` is operating).</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: LineCover -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>LineCover</maml:name>
        <maml:description>
          <maml:para>Do not record branch coverage. Implies, and is compatible with, the -ReportFormat "opencover" option. Incompatible with `-BranchCover`.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: BranchCover -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>BranchCover</maml:name>
        <maml:description>
          <maml:para>Do not record line coverage. Implies, and is compatible with, the -ReportFormat "opencover" option. Incompatible with `-LineCover`.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Version -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>Selects `Version` mode</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: DropReturnCode -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>DropReturnCode</maml:name>
        <maml:description>
          <maml:para>Do not report any non-zero return code from a launched process.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: SourceLink -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>SourceLink</maml:name>
        <maml:description>
          <maml:para>Display sourcelink URLs rather than file paths if present.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: Defer -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Defer</maml:name>
        <maml:description>
          <maml:para>Defers writing runner-mode coverage data until process exit.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: LocalSource -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>LocalSource</maml:name>
        <maml:description>
          <maml:para>Don't instrument code for which the source file is not present.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: VisibleBranches -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>VisibleBranches</maml:name>
        <maml:description>
          <maml:para>Hide complex internal IL branching implementation details in switch/match constructs, and just show what the source level logic implies.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: ShowGenerated -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>ShowGenerated</maml:name>
        <maml:description>
          <maml:para>Mark generated code with a visit count of -2 (Automatic) for the Visualizer if unvisited</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: ShowStatic -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>ShowStatic</maml:name>
        <maml:description>
          <maml:para>Instrument and show code that is by default skipped as trivial.</maml:para>
          <maml:para>Possible values: KeepHidden, Mark, Reveal</maml:para>
        </maml:description>
        <command:parameterValue required="true">ShowHidden</command:parameterValue>
        <dev:type>
          <maml:name>AltCover.Commands.ShowHidden</maml:name>
          <maml:uri />
          <maml:description>
            <maml:para>Values for the Invoke-AltCover -ShowStatic option</maml:para>
          </maml:description>
        </dev:type>
        <dev:defaultValue>KeepHidden</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">KeepHidden</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Mark</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Reveal</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: SummaryFormat -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>SummaryFormat</maml:name>
        <maml:description>
          <maml:para>Selects summary format</maml:para>
          <maml:para>Possible values: Default, N, O, C, R, B, RPlus, BPlus</maml:para>
        </maml:description>
        <command:parameterValue required="true">Summary[]</command:parameterValue>
        <dev:type>
          <maml:name>AltCover.Commands.Summary[]</maml:name>
          <maml:uri />
          <maml:description>
            <maml:para>Values for the Invoke-AltCover -Summary option</maml:para>
          </maml:description>
        </dev:type>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Default</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">N</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">O</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">C</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">R</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">B</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">RPlus</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">BPlus</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: Verbosity -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>Verbosity</maml:name>
        <maml:description>
          <maml:para>Selects output level of the command</maml:para>
          <maml:para>Possible values: Off, Error, Warning, Info, Verbose</maml:para>
        </maml:description>
        <command:parameterValue required="true">TraceLevel</command:parameterValue>
        <dev:type>
          <maml:name>System.Diagnostics.TraceLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>Info</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Off</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Error</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Warning</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Info</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">Verbose</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <!-- OutputType: String -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
      <!-- OutputType: None -->
      <command:returnValue>
        <dev:type>
          <maml:name>None</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Invoke-AltCover -Report $x -OutputDirectory  $o -InputDirectory $i -AssemblyFilter "Adapter" -ReportFormat NCover -InformationAction Continue</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: ConvertTo-BarChart -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>ConvertTo-BarChart</command:name>
      <command:verb>ConvertTo</command:verb>
      <command:noun>BarChart</command:noun>
      <maml:description>
        <maml:para>Generates a simple HTML report from coverage data.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>The report produced is based on the old NCover 1.5.8 XSLT, for both NCover and OpenCover coverage format data. The input is as a file name or an `XDocument` from the pipeline, the output is to the pipeline as an `XDocument`, and, optionally, to a file.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>ConvertTo-BarChart</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFile -->
      <command:syntaxItem>
        <maml:name>ConvertTo-BarChart</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Output as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>$xml = ConvertTo-BarChart -InputFile "./Tests/HandRolledMonoCoverage.xml" -OutputFile "./_Packaging/HandRolledMonoCoverage.html"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: Compress-Branching -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Compress-Branching</command:name>
      <command:verb>Compress</command:verb>
      <command:noun>Branching</command:noun>
      <maml:description>
        <maml:para>Removes compiler-generated hidden branches from OpenCover.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Takes output from the OpenCover program, and adjust from OpenCover's liberal idea of significant branches towards AltCover's more restricted approach -- chose either or both of `-SameSpan` to unify branches that go from the same start, and take the same trajectory to the same end (OpenCover issue #786 being one instance of this) and `-WithinSequencePoint` to remove branches interior to a statement (compiler generated things like stashing of lambdas, the hidden conditional `Dispose()` after a `using`, or inside F# inlines -- OpenCover issues #657, #807 being instances of this).</maml:para>
      <maml:para>Either takes an `XDocument` from the pipeline or from a file; emits the result as an `XDocument` to the pipeline and optionally to a file.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDocA -->
      <command:syntaxItem>
        <maml:name>Compress-Branching</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: SameSpan -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="4">
          <maml:name>SameSpan</maml:name>
          <maml:description>
            <maml:para>Merge branches when start and end at the same place</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: WithinSequencePoint -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="4">
          <maml:name>WithinSequencePoint</maml:name>
          <maml:description>
            <maml:para>Discard branches within a sequence point</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: XmlDocB -->
      <command:syntaxItem>
        <maml:name>Compress-Branching</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: WithinSequencePoint -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="4">
          <maml:name>WithinSequencePoint</maml:name>
          <maml:description>
            <maml:para>Discard branches within a sequence point</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFileA -->
      <command:syntaxItem>
        <maml:name>Compress-Branching</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: SameSpan -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="4">
          <maml:name>SameSpan</maml:name>
          <maml:description>
            <maml:para>Merge branches when start and end at the same place</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: WithinSequencePoint -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="4">
          <maml:name>WithinSequencePoint</maml:name>
          <maml:description>
            <maml:para>Discard branches within a sequence point</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFileB -->
      <command:syntaxItem>
        <maml:name>Compress-Branching</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
        <!-- Parameter: WithinSequencePoint -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="4">
          <maml:name>WithinSequencePoint</maml:name>
          <maml:description>
            <maml:para>Discard branches within a sequence point</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Output as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
      <!-- Parameter: SameSpan -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="4">
        <maml:name>SameSpan</maml:name>
        <maml:description>
          <maml:para>Merge branches when start and end at the same place</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: WithinSequencePoint -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="4">
        <maml:name>WithinSequencePoint</maml:name>
        <maml:description>
          <maml:para>Discard branches within a sequence point</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>$xml = Compress-Branching -WithinSequencePoint -InputFile "./Tests/Compressible.xml" -OutputFile "./_Packaging/CompressInterior.xml"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: ConvertTo-Cobertura -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>ConvertTo-Cobertura</command:name>
      <command:verb>ConvertTo</command:verb>
      <command:noun>Cobertura</command:noun>
      <maml:description>
        <maml:para>Creates a Cobertura format report from other report formats.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Takes either OpenCover or classic NCover format input as an `XDocument`, as an argument or from the object pipeline.</maml:para>
      <maml:para>Writes the Cobertura report to the object pipeline as an `XDocument`, and optionally to a file.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>ConvertTo-Cobertura</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFile -->
      <command:syntaxItem>
        <maml:name>ConvertTo-Cobertura</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Output as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>ConvertTo-Cobertura -InputFile "./Tests/HandRolledMonoCoverage.xml" -OutputFile "./_Packaging/OpenCover.lcov"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: ConvertFrom-CoverageJson -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>ConvertFrom-CoverageJson</command:name>
      <command:verb>ConvertFrom</command:verb>
      <command:noun>CoverageJson</command:noun>
      <maml:description>
        <maml:para>Creates an OpenCover-style XML document from coverlet or AltCover JSON.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Takes either coverlet or AltCover JSON input as file path, or a string as an argument or from the object pipeline.</maml:para>
      <maml:para>Writes the XML report to the object pipeline as an `XDocument`, and optionally to a file.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: json -->
      <command:syntaxItem>
        <maml:name>ConvertFrom-CoverageJson</maml:name>
        <!-- Parameter: Json -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>Json</maml:name>
          <maml:description>
            <maml:para>Input as `string` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFile -->
      <command:syntaxItem>
        <maml:name>ConvertFrom-CoverageJson</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: Json -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>Json</maml:name>
        <maml:description>
          <maml:para>Input as `string` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Output as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `string` value</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>ConvertFrom-CoverageJson -InputFile "./Tests/Sample4.coverlet.json" -OutputFile "./_Packaging/Sample4.coverlet.json"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: ConvertTo-CoverageJson -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>ConvertTo-CoverageJson</command:name>
      <command:verb>ConvertTo</command:verb>
      <command:noun>CoverageJson</command:noun>
      <maml:description>
        <maml:para>Creates a JSON format report from other report formats.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Takes either OpenCover or classic NCover format input as an `XDocument`, as an argument or from the object pipeline. Writes the JSON report to a string.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>ConvertTo-CoverageJson</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFile -->
      <command:syntaxItem>
        <maml:name>ConvertTo-CoverageJson</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: String -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>ConvertTo-CoverageJson -InputFile "./Tests/HandRolledMonoCoverage.xml"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: ConvertTo-Lcov -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>ConvertTo-Lcov</command:name>
      <command:verb>ConvertTo</command:verb>
      <command:noun>Lcov</command:noun>
      <maml:description>
        <maml:para>Creates an Lcov format report from other report formats.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Takes either OpenCover or classic NCover format input as an `XDocument`, as an argument or from the object pipeline. Writes the Lcov report to a file.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>ConvertTo-Lcov</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFile -->
      <command:syntaxItem>
        <maml:name>ConvertTo-Lcov</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Output as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: None -->
      <command:returnValue>
        <dev:type>
          <maml:name>None</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>ConvertTo-Lcov -InputFile "./Tests/HandRolledMonoCoverage.xml" -OutputFile "./_Packaging/OpenCover.lcov"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: ConvertFrom-NCover -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>ConvertFrom-NCover</command:name>
      <command:verb>ConvertFrom</command:verb>
      <command:noun>NCover</command:noun>
      <maml:description>
        <maml:para>Converts classic NCover format and returns OpenCover format.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>The classic NCover format input may be either may be as an `XDocument` from the object pipeline or from a file.</maml:para>
      <maml:para>Writes the OpenCover format report to the pipeline as an `XDocument`, and, optionally, to a file. The report will contain data for the assemblies listed as the `-Assembly` argument and that are in the NCover input.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>ConvertFrom-NCover</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Assembly -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>Assembly</maml:name>
          <maml:description>
            <maml:para>Assemblies to use for generating the output</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFile -->
      <command:syntaxItem>
        <maml:name>ConvertFrom-NCover</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Assembly -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>Assembly</maml:name>
          <maml:description>
            <maml:para>Assemblies to use for generating the output</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Assembly -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
        <maml:name>Assembly</maml:name>
        <maml:description>
          <maml:para>Assemblies to use for generating the output</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Output as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>$xml = ConvertFrom-NCover -InputFile "./_Reports/ReleaseXUnitFSharpTypesDotNetRunner.xml" -Assembly $Assemblies -OutputFile "./_Packaging/AltCoverFSharpTypes.xml"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: ConvertTo-NCover -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>ConvertTo-NCover</command:name>
      <command:verb>ConvertTo</command:verb>
      <command:noun>NCover</command:noun>
      <maml:description>
        <maml:para>Converts OpenCover format to NCover format.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Takes the OpenCover input either as an ``XDocument`` from the object pipeline or from a file.</maml:para>
      <maml:para>Writes the classic NCover report to the pipeline as an ``XDocument``, and, optionally, to a file.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>ConvertTo-NCover</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFile -->
      <command:syntaxItem>
        <maml:name>ConvertTo-NCover</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Output as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>$xml = ConvertTo-NCover -InputFile "./Tests/HandRolledMonoCoverage.xml" -OutputFile "./_Packaging/HandRolledMonoNCover.xml"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: Merge-OpenCover -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Merge-OpenCover</command:name>
      <command:verb>Merge</command:verb>
      <command:noun>OpenCover</command:noun>
      <maml:description>
        <maml:para>Merges OpenCover reports.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Takes a set of OpenCover reports and crates a composite. It handles both strict (`OpenCover`, `AltCover --reportFormat=OpenCover`) and more relaxed (`coverlet`, `ConvertFrom-CoverageJson`, `Write-OpenCoverDerivedState -Coverlet`) interpretations of the format, which may lead to a not-quite strict result. Note -- Module records are merged only if their hash values match, so output from different builds and possibly different source will be kept distinct.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>Merge-OpenCover</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as XML</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument[]</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: Files -->
      <command:syntaxItem>
        <maml:name>Merge-OpenCover</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file paths</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as XML</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument[]</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file paths</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="named">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Output as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as XML</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as file paths</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>$xml = $docs | Merge-OpenCover -OutputFile "./_Packaging/Combined.xml"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: Write-OpenCoverDerivedState -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>Write-OpenCoverDerivedState</command:name>
      <command:verb>Write</command:verb>
      <command:noun>OpenCoverDerivedState</command:noun>
      <maml:description>
        <maml:para>Fills other values based on recorded visit count numbers.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Adds or updates summary data and other computed items in the OpenCover format report.</maml:para>
      <maml:para>In `-Coverlet` mode, also fills in some of the gaps left by `coverlet`'s OpenCover dialect, particularly giving somewhat meaningful start and end column values for its line-based paradigm, as well as npath coverage and branch exits.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDocCoverlet -->
      <command:syntaxItem>
        <maml:name>Write-OpenCoverDerivedState</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Coverlet -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>Coverlet</maml:name>
          <maml:description>
            <maml:para>The data source was generated by `coverlet`, so needs more work doing.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Assembly -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="3">
          <maml:name>Assembly</maml:name>
          <maml:description>
            <maml:para>Assemblies to use for generating the output</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="4">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>Write-OpenCoverDerivedState</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: BranchOrdinal -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>BranchOrdinal</maml:name>
          <maml:description>
            <maml:para>The data source was generated by `coverlet`, so needs more work doing.</maml:para>
            <maml:para>Possible values: Offset, SL</maml:para>
          </maml:description>
          <command:parameterValue required="true">BranchOrdinal</command:parameterValue>
          <dev:type>
            <maml:name>AltCover.BranchOrdinal</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Offset</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Offset</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">SL</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFileCoverlet -->
      <command:syntaxItem>
        <maml:name>Write-OpenCoverDerivedState</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: Coverlet -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
          <maml:name>Coverlet</maml:name>
          <maml:description>
            <maml:para>The data source was generated by `coverlet`, so needs more work doing.</maml:para>
          </maml:description>
          <command:parameterValue required="true">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <!-- Parameter: Assembly -->
        <command:parameter required="true" globbing="false" pipelineInput="false" position="3">
          <maml:name>Assembly</maml:name>
          <maml:description>
            <maml:para>Assemblies to use for generating the output</maml:para>
          </maml:description>
          <command:parameterValue required="true">string[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="4">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <!-- Parameter set: FromFile -->
      <command:syntaxItem>
        <maml:name>Write-OpenCoverDerivedState</maml:name>
        <!-- Parameter: InputFile -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>InputFile</maml:name>
          <maml:description>
            <maml:para>Input as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
        <!-- Parameter: BranchOrdinal -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
          <maml:name>BranchOrdinal</maml:name>
          <maml:description>
            <maml:para>The data source was generated by `coverlet`, so needs more work doing.</maml:para>
            <maml:para>Possible values: Offset, SL</maml:para>
          </maml:description>
          <command:parameterValue required="true">BranchOrdinal</command:parameterValue>
          <dev:type>
            <maml:name>AltCover.BranchOrdinal</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Offset</dev:defaultValue>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Offset</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">SL</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <!-- Parameter: OutputFile -->
        <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>Output as file path</maml:para>
          </maml:description>
          <command:parameterValue required="true">string</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue></dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: InputFile -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>InputFile</maml:name>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: Coverlet -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="2">
        <maml:name>Coverlet</maml:name>
        <maml:description>
          <maml:para>The data source was generated by `coverlet`, so needs more work doing.</maml:para>
        </maml:description>
        <command:parameterValue required="true">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <!-- Parameter: BranchOrdinal -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="2">
        <maml:name>BranchOrdinal</maml:name>
        <maml:description>
          <maml:para>The data source was generated by `coverlet`, so needs more work doing.</maml:para>
          <maml:para>Possible values: Offset, SL</maml:para>
        </maml:description>
        <command:parameterValue required="true">BranchOrdinal</command:parameterValue>
        <dev:type>
          <maml:name>AltCover.BranchOrdinal</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>Offset</dev:defaultValue>
        <command:parameterValueGroup>
          <command:parameterValue required="false" variableLength="false">Offset</command:parameterValue>
          <command:parameterValue required="false" variableLength="false">SL</command:parameterValue>
        </command:parameterValueGroup>
      </command:parameter>
      <!-- Parameter: Assembly -->
      <command:parameter required="true" globbing="false" pipelineInput="false" position="3">
        <maml:name>Assembly</maml:name>
        <maml:description>
          <maml:para>Assemblies to use for generating the output</maml:para>
        </maml:description>
        <command:parameterValue required="true">string[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
      <!-- Parameter: OutputFile -->
      <command:parameter required="false" globbing="false" pipelineInput="false" position="3">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>Output as file path</maml:para>
        </maml:description>
        <command:parameterValue required="true">string</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue></dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as file path</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>$xml = Write-OpenCoverDerivedState -InputFile "./_Reports/OpenCoverForPester/OpenCoverForPester.coverlet.xml" -Coverlet -Assembly $Assemblies -OutputFile "./_Packaging/OpenCoverForPester.coverlet.xml"</dev:code>
      </command:example>
      <command:example>
        <maml:title>----------  EXAMPLE 2  ----------</maml:title>
        <dev:code>$xml = Write-OpenCoverDerivedState -InputFile "./_Reports/OpenCoverForPester/OpenCoverForPester.xml"</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: ConvertTo-XDocument -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>ConvertTo-XDocument</command:name>
      <command:verb>ConvertTo</command:verb>
      <command:noun>XDocument</command:noun>
      <maml:description>
        <maml:para>Converts `[xml]` to `XDocument`.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Takes an `[xml]` in and puts an `XDocument` to the object pipeline.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>ConvertTo-XDocument</maml:name>
        <!-- Parameter: XmlDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XmlDocument</maml:name>
          <maml:description>
            <maml:para>Input as `[xml]` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XmlDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.XmlDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XmlDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XmlDocument</maml:name>
        <maml:description>
          <maml:para>Input as `[xml]` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XmlDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.XmlDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.XmlDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `[xml]` value</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>$xd = [xml]"&lt;Document /&gt;" | ConvertTo-XDocument</dev:code>
      </command:example>
    </command:examples>
  </command:command>
  <!-- Cmdlet: ConvertTo-XmlDocument -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
    <command:details>
      <command:name>ConvertTo-XmlDocument</command:name>
      <command:verb>ConvertTo</command:verb>
      <command:noun>XmlDocument</command:noun>
      <maml:description>
        <maml:para>Converts `XDocument` to `[xml]`.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Takes an `XDocument` in and puts an `[xml]` to the object pipeline.</maml:para>
    </maml:description>
    <command:syntax>
      <!-- Parameter set: XmlDoc -->
      <command:syntaxItem>
        <maml:name>ConvertTo-XmlDocument</maml:name>
        <!-- Parameter: XDocument -->
        <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
          <maml:name>XDocument</maml:name>
          <maml:description>
            <maml:para>Input as `XDocument` value</maml:para>
          </maml:description>
          <command:parameterValue required="true">XDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.Linq.XDocument</maml:name>
            <maml:uri />
          </dev:type>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <!-- Parameter: XDocument -->
      <command:parameter required="true" globbing="false" pipelineInput="true (ByValue)" position="1">
        <maml:name>XDocument</maml:name>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
        <command:parameterValue required="true">XDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Xml.Linq.XDocument</maml:name>
          <maml:uri />
        </dev:type>
        <maml:description>
          <maml:para>Input as `XDocument` value</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <!-- OutputType: XmlDocument -->
      <command:returnValue>
        <dev:type>
          <maml:name>System.Xml.XmlDocument</maml:name>
          <maml:uri />
        </dev:type>
      </command:returnValue>
    </command:returnValues>
    <command:examples>
      <command:example>
        <maml:title>----------  EXAMPLE 1  ----------</maml:title>
        <dev:code>Add-Accelerator -XDocument; $xd = [xdoc]::Load("./Tests/Sample1WithNCover.xml");  $xml = $xd | ConvertTo-XmlDocument</dev:code>
        <dev:remarks>
          <maml:para>Adds `[xdoc]` the easy way first, then does the conversion</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
  </command:command>
</helpItems>